class PlayersFactory

  def self.create_player(name, position, &block)

    player_name = name

    ->(own_block) do
      yield
      own_block.call
      p "I'm #{player_name}, and I play as  #{position}"
    end

  end

end

Створюємо клас PlayerFactory
Створюємо метод класу create_player з атрибутами name, position, а також блок
Змінній player_name  передається аргумент name

Для кожного гравця створюється лямбда в яку прередається відповідний блок
own_block
викликається own_block і виводиться строка в якій вказується name i position
відповідного гравця ("I'm #{player_name}, and I play as  #{position}")


class Playground


  attr_accessor :arena_name, :players

  def initialize(arena_name, player_involved)

    self.arena_name = arena_name
    self.players = []
    player_involved.each do |player|
      players.push PlayersFactory.create_player(player[:name], player[:position])
      { p "I`m glad to play on #{self.arena_name}" } if player.has_key?(:name)
      && player.has_key?(:position)
    end
  end

  def call_over(actions)
    self.players.each_with_index { |player, index| player.call(actions[index]) }
  end

end

Створюємо клас Playground
Створюємо гетери та сетери класу :arena_name, :players
Ініціюємо метод класу arena_name
Ініціюємо метод класу players якому присвоюємо пустий масив
Для кожного елементу масиву хеш-об'єктів player_involved, які мають ключі :name
  i :player, викликається метод create_player класу PlayersFactory, куди
  передаються відповідні параметри гравця :name та :position, а також блок
  { p "I`m glad to play on #{self.arena_name};
Передаємо в масив players об'єкти у форматі физначеному методом
PlayersFactory.create_player

Створюємо метод call_over з аргументом actions
В якому відбувається виклик кожного об'єкту масиву players із передачею йому
параметру у вигляді елементу масиву actions згідно їх індексу в масиві.

p_actions = []

Створюється пустий масив p_actions

p_actions.push -> { p "Jumps and crys" }
p_actions.push -> { p "Crys and jumps and crys" }
p_actions.push -> { p "Stands as stone" }

в масив p_actions передаються нові об'єкти у вигляді лямда-блоків

playground = Playground.new("Football arena #1", [{name: "Bill", position:
  "Cornerback"}, {name: "Otto", position: "Wide Receiver"}, {name: "Lenny",
  position: "End"}])

Створюється інстанс playground класу Playground якому передаються відповідні
  аргументи у вигляді масиву хеш-об'єктів

playground.call_over(p_actions)

Відбувається виклик методу call_over кдасу Playground для інстансу playground із
  передачею цьому методу аргументу у вигляді створеного масиву p_actions.
